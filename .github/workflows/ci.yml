name: ci
on:
  push: {branches-ignore: [latest], tags: ['*']}
  pull_request:
env:
  PACKAGE_NAME: ${{ github.event.repository.name }}
  PACKAGE_VERSION: ${{ github.sha }}
  MYCI_NEXUS_USERNAME: cppfw
  MYCI_NEXUS_PASSWORD: ${{ secrets.MYCI_NEXUS_PASSWORD }}
  MYCI_GIT_USERNAME: igagis
  MYCI_GIT_PASSWORD: ${{ secrets.MYCI_GIT_ACCESS_TOKEN }}
  MYCI_CONAN_REMOTE: https://gagis.hopto.org/conan
  MYCI_CONAN_USER: cppfw
  MYCI_CONAN_PASSWORD: ${{ secrets.MYCI_CONAN_PASSWORD }}
jobs:
##### ios #####
  ios:
    runs-on: macos-latest
    steps:
    - name: add cppfw tap
      run: |
        brew tap cppfw/tap
        brew update
    - name: install ci tools
      run: brew install myci
    - name: git clone
      uses: myci-actions/checkout@main
    - name: set PACKAGE_VERSION
      uses: myci-actions/export-env-var@main
      with: {name: PACKAGE_VERSION, value: $(cat version.txt)}
    - name: add cocoapods repo
      run: pod repo add --silent cppfw https://$MYCI_GIT_USERNAME@github.com/cppfw/cocoapods-repo.git
    - name: install deps
      run: pod install --project-directory=xcode
    # - name: add sources to xcode project
    #   run: |
    #     curl -L https://github.com/zackslash/Xcode-Proj-Adder/raw/master/bin/XcodeProjAdder -O
    #     chmod +x XcodeProjAdder
    #     cd xcode/$PACKAGE_NAME
    #     ../../XcodeProjAdder -XCP $PACKAGE_NAME.xcodeproj -SCSV `echo $(find ../../src -type f -name *.cpp) | sed -E -e 's/ /,/g'`
    - name: build
      run: |
        xcodebuild CONFIGURATION_BUILD_DIR=../build_ios -sdk iphoneos -workspace xcode/$PACKAGE_NAME.xcworkspace -scheme $PACKAGE_NAME -configuration Release
        xcodebuild CONFIGURATION_BUILD_DIR=../build_iossim -sdk iphonesimulator -workspace xcode/$PACKAGE_NAME.xcworkspace -scheme $PACKAGE_NAME -configuration Release
        xcodebuild -create-xcframework -framework "xcode/build_ios/$PACKAGE_NAME.framework" -framework "xcode/build_iossim/$PACKAGE_NAME.framework" -output "xcode/$PACKAGE_NAME.xcframework"
    - name: create package
      run: myci-create-zip-package.sh --headers-dir include --file xcode/$PACKAGE_NAME.xcframework///lib/ios --file LICENSE $PACKAGE_NAME-$PACKAGE_VERSION.zip
    - name: deploy
      run: |
        echo "${{ secrets.MYCI_REPO_SSH_KEY }}" > repo_key_rsa && chmod 600 repo_key_rsa
        myci-deploy-cocoapods-ssh.sh --repo cppfw --version $PACKAGE_VERSION --server gagis.hopto.org --key repo_key_rsa --generic-repo cppfw/cocoapods --package $PACKAGE_NAME-$PACKAGE_VERSION.zip cocoapods/$PACKAGE_NAME.podspec.in
      # if: startsWith(github.ref, 'refs/tags/')
##### android #####
  android:
    runs-on: ubuntu-latest
    container: mingc/android-build-box:latest
    steps:
    - name: git clone
      uses: myci-actions/checkout@main
    - name: add cppfw deb repo
      uses: myci-actions/add-deb-repo@main
      with:
        repo: deb https://gagis.hopto.org/repo/cppfw/$(lsb_release --id --short | tr '[:upper:]' '[:lower:]') $(lsb_release --codename --short) main
        repo-name: cppfw
        key-server: https://gagis.hopto.org/repo/cppfw/pubkey.gpg
        install: myci
    - name: set PACKAGE_VERSION
      uses: myci-actions/export-env-var@main
      with: {name: PACKAGE_VERSION, value: $(cat version.txt)}
    - name: build
      run: |
        cd android
        ./gradlew copy_aar --warning-mode all
        myci-apply-version.sh -v $PACKAGE_VERSION *.pom.in
        myci-apply-version.sh -v $PACKAGE_VERSION *.aar.in --filename-only
    - name: deploy
      run: myci-deploy-maven-nexus.sh --base-url https://gagis.hopto.org/nexus --repo android android/$PACKAGE_NAME-$PACKAGE_VERSION.aar
      # if: startsWith(github.ref, 'refs/tags/')
##### msvs #####
  msvs:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
    - name: git clone
      uses: actions/checkout@v2
    - name: install CoAPP tools
      uses: myci-actions/install-coapp-tools@main
    - name: nuget update
      run: |
        nuget restore msvs_solution/msvs_solution.sln
        nuget update msvs_solution/msvs_solution.sln
    - name: add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: build
      run: .\nuget\build_nuget.ps1
    - name: deploy
      uses: myci-actions/publish-nuget@main
      with:
        filename: '.\nuget\*.nupkg'
        api-key: ${{ secrets.NUGET_DOT_ORG_API_KEY }}
      # if: startsWith(github.ref, 'refs/tags/')
##### conan - emscripten #####
  conan-emscripten:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - {os: ubuntu, codename: noble, image_owner: }
          - {os: debian, codename: bookworm, image_owner: }
    runs-on: ${{ (matrix.labels == '' && 'ubuntu-latest') || matrix.labels }}
    container: ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.codename }}
    name: conan - emscripten | ${{ matrix.labels[0] }}
    steps:
      - name: add cppfw deb repo
        uses: myci-actions/add-deb-repo@main
        with:
          repo: deb https://gagis.hopto.org/repo/cppfw/${{ matrix.os }} ${{ matrix.codename }} main
          repo-name: cppfw
          keys-asc: https://gagis.hopto.org/repo/cppfw/pubkey.gpg
          install: devscripts equivs myci pipx cmake git nodejs
      - name: add ~/.local/bin to PATH
        uses: myci-actions/export-env-var@main
        with: {name: PATH, value: "$PATH:$HOME/.local/bin"}
      - name: install conan
        run: pipx install conan
      - name: create default conan profile
        run: |
          conan profile detect --name default
          sed -i -E "s/compiler.cppstd=.*$/compiler.cppstd=17/g" ~/.conan2/profiles/default
      - name: git clone
        uses: myci-actions/checkout@main
        with:
          submodules: false
      - name: set PACKAGE_VERSION
        uses: myci-actions/export-env-var@main
        with: {name: PACKAGE_VERSION, value: $(myci-deb-version.sh)}
        if: startsWith(github.ref, 'refs/tags/')
      - name: build
        run: |
          conan remote add cppfw $MYCI_CONAN_REMOTE
          # NOTE: specifying empty test folder to skip the test stage
          conan create build/conan --profile:build default --profile:host build/emscripten/conan.profile --build=missing --user $MYCI_CONAN_USER --channel main --version $PACKAGE_VERSION --test-folder ""
      - name: deploy conan package
        run: |
          conan remote login --password $MYCI_CONAN_PASSWORD cppfw $MYCI_CONAN_USER
          conan upload --check --remote cppfw $PACKAGE_NAME/$PACKAGE_VERSION@$MYCI_CONAN_USER/main
        # if: startsWith(github.ref, 'refs/tags/')